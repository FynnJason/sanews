package com.fynnjason.sanews.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fynnjason.sanews.bean.SearchRecordBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEARCH_RECORD_BEAN".
*/
public class SearchRecordBeanDao extends AbstractDao<SearchRecordBean, String> {

    public static final String TABLENAME = "SEARCH_RECORD_BEAN";

    /**
     * Properties of entity SearchRecordBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SearchText = new Property(0, String.class, "searchText", true, "SEARCH_TEXT");
    }


    public SearchRecordBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SearchRecordBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEARCH_RECORD_BEAN\" (" + //
                "\"SEARCH_TEXT\" TEXT PRIMARY KEY NOT NULL );"); // 0: searchText
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEARCH_RECORD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SearchRecordBean entity) {
        stmt.clearBindings();
 
        String searchText = entity.getSearchText();
        if (searchText != null) {
            stmt.bindString(1, searchText);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SearchRecordBean entity) {
        stmt.clearBindings();
 
        String searchText = entity.getSearchText();
        if (searchText != null) {
            stmt.bindString(1, searchText);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SearchRecordBean readEntity(Cursor cursor, int offset) {
        SearchRecordBean entity = new SearchRecordBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0) // searchText
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SearchRecordBean entity, int offset) {
        entity.setSearchText(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SearchRecordBean entity, long rowId) {
        return entity.getSearchText();
    }
    
    @Override
    public String getKey(SearchRecordBean entity) {
        if(entity != null) {
            return entity.getSearchText();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SearchRecordBean entity) {
        return entity.getSearchText() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
